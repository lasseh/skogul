// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svcset_telemetry.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServicesInfra struct {
	SvcsPluginsInfo      []*PluginsInfo  `protobuf:"bytes,1,rep,name=svcs_plugins_info,json=svcsPluginsInfo" json:"svcs_plugins_info,omitempty"`
	SvcsetCpuInfo        []*CpuUsageInfo `protobuf:"bytes,2,rep,name=svcset_cpu_info,json=svcsetCpuInfo" json:"svcset_cpu_info,omitempty"`
	SvcsetMemInfo        []*MemUsageInfo `protobuf:"bytes,3,rep,name=svcset_mem_info,json=svcsetMemInfo" json:"svcset_mem_info,omitempty"`
	SvcsetSvcInfo        []*ServicesInfo `protobuf:"bytes,4,rep,name=svcset_svc_info,json=svcsetSvcInfo" json:"svcset_svc_info,omitempty"`
	SvcsetPktdropInfo    []*PktDropInfo  `protobuf:"bytes,5,rep,name=svcset_pktdrop_info,json=svcsetPktdropInfo" json:"svcset_pktdrop_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServicesInfra) Reset()         { *m = ServicesInfra{} }
func (m *ServicesInfra) String() string { return proto.CompactTextString(m) }
func (*ServicesInfra) ProtoMessage()    {}
func (*ServicesInfra) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{0}
}

func (m *ServicesInfra) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesInfra.Unmarshal(m, b)
}
func (m *ServicesInfra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesInfra.Marshal(b, m, deterministic)
}
func (m *ServicesInfra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesInfra.Merge(m, src)
}
func (m *ServicesInfra) XXX_Size() int {
	return xxx_messageInfo_ServicesInfra.Size(m)
}
func (m *ServicesInfra) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesInfra.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesInfra proto.InternalMessageInfo

func (m *ServicesInfra) GetSvcsPluginsInfo() []*PluginsInfo {
	if m != nil {
		return m.SvcsPluginsInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetCpuInfo() []*CpuUsageInfo {
	if m != nil {
		return m.SvcsetCpuInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetMemInfo() []*MemUsageInfo {
	if m != nil {
		return m.SvcsetMemInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetSvcInfo() []*ServicesInfo {
	if m != nil {
		return m.SvcsetSvcInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetPktdropInfo() []*PktDropInfo {
	if m != nil {
		return m.SvcsetPktdropInfo
	}
	return nil
}

///=========================
type PluginsInfo struct {
	SpNumPlugins         *uint64  `protobuf:"varint,1,opt,name=sp_num_plugins,json=spNumPlugins" json:"sp_num_plugins,omitempty"`
	SpName               *string  `protobuf:"bytes,2,opt,name=sp_name,json=spName" json:"sp_name,omitempty"`
	SpPid                *uint64  `protobuf:"varint,3,opt,name=sp_pid,json=spPid" json:"sp_pid,omitempty"`
	SpDataEvh            *uint64  `protobuf:"varint,4,opt,name=sp_data_evh,json=spDataEvh" json:"sp_data_evh,omitempty"`
	SpControlEvh         *uint64  `protobuf:"varint,5,opt,name=sp_control_evh,json=spControlEvh" json:"sp_control_evh,omitempty"`
	SpClass              *uint64  `protobuf:"varint,6,opt,name=sp_class,json=spClass" json:"sp_class,omitempty"`
	SpProviderId         *uint64  `protobuf:"varint,7,opt,name=sp_provider_id,json=spProviderId" json:"sp_provider_id,omitempty"`
	SpAppId              *uint64  `protobuf:"varint,8,opt,name=sp_app_id,json=spAppId" json:"sp_app_id,omitempty"`
	SpPluginFlags        *uint64  `protobuf:"varint,9,opt,name=sp_plugin_flags,json=spPluginFlags" json:"sp_plugin_flags,omitempty"`
	SpTcpSupportFlags    *uint64  `protobuf:"varint,10,opt,name=sp_tcp_support_flags,json=spTcpSupportFlags" json:"sp_tcp_support_flags,omitempty"`
	SpEvClassBase        *uint64  `protobuf:"varint,11,opt,name=sp_ev_class_base,json=spEvClassBase" json:"sp_ev_class_base,omitempty"`
	SpPluginMask         *uint64  `protobuf:"varint,12,opt,name=sp_plugin_mask,json=spPluginMask" json:"sp_plugin_mask,omitempty"`
	SpEvClassName        []string `protobuf:"bytes,13,rep,name=sp_ev_class_name,json=spEvClassName" json:"sp_ev_class_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginsInfo) Reset()         { *m = PluginsInfo{} }
func (m *PluginsInfo) String() string { return proto.CompactTextString(m) }
func (*PluginsInfo) ProtoMessage()    {}
func (*PluginsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{1}
}

func (m *PluginsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginsInfo.Unmarshal(m, b)
}
func (m *PluginsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginsInfo.Marshal(b, m, deterministic)
}
func (m *PluginsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginsInfo.Merge(m, src)
}
func (m *PluginsInfo) XXX_Size() int {
	return xxx_messageInfo_PluginsInfo.Size(m)
}
func (m *PluginsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PluginsInfo proto.InternalMessageInfo

func (m *PluginsInfo) GetSpNumPlugins() uint64 {
	if m != nil && m.SpNumPlugins != nil {
		return *m.SpNumPlugins
	}
	return 0
}

func (m *PluginsInfo) GetSpName() string {
	if m != nil && m.SpName != nil {
		return *m.SpName
	}
	return ""
}

func (m *PluginsInfo) GetSpPid() uint64 {
	if m != nil && m.SpPid != nil {
		return *m.SpPid
	}
	return 0
}

func (m *PluginsInfo) GetSpDataEvh() uint64 {
	if m != nil && m.SpDataEvh != nil {
		return *m.SpDataEvh
	}
	return 0
}

func (m *PluginsInfo) GetSpControlEvh() uint64 {
	if m != nil && m.SpControlEvh != nil {
		return *m.SpControlEvh
	}
	return 0
}

func (m *PluginsInfo) GetSpClass() uint64 {
	if m != nil && m.SpClass != nil {
		return *m.SpClass
	}
	return 0
}

func (m *PluginsInfo) GetSpProviderId() uint64 {
	if m != nil && m.SpProviderId != nil {
		return *m.SpProviderId
	}
	return 0
}

func (m *PluginsInfo) GetSpAppId() uint64 {
	if m != nil && m.SpAppId != nil {
		return *m.SpAppId
	}
	return 0
}

func (m *PluginsInfo) GetSpPluginFlags() uint64 {
	if m != nil && m.SpPluginFlags != nil {
		return *m.SpPluginFlags
	}
	return 0
}

func (m *PluginsInfo) GetSpTcpSupportFlags() uint64 {
	if m != nil && m.SpTcpSupportFlags != nil {
		return *m.SpTcpSupportFlags
	}
	return 0
}

func (m *PluginsInfo) GetSpEvClassBase() uint64 {
	if m != nil && m.SpEvClassBase != nil {
		return *m.SpEvClassBase
	}
	return 0
}

func (m *PluginsInfo) GetSpPluginMask() uint64 {
	if m != nil && m.SpPluginMask != nil {
		return *m.SpPluginMask
	}
	return 0
}

func (m *PluginsInfo) GetSpEvClassName() []string {
	if m != nil {
		return m.SpEvClassName
	}
	return nil
}

//--------------------------
type CpuUsageInfo struct {
	SvcsetId             *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent      *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId     *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType              *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType           *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName           *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	CpuUtilization       *uint64  `protobuf:"varint,7,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	CpuZone              *uint64  `protobuf:"varint,8,opt,name=cpu_zone,json=cpuZone" json:"cpu_zone,omitempty"`
	CpuLoad              *float32 `protobuf:"fixed32,9,opt,name=cpu_load,json=cpuLoad" json:"cpu_load,omitempty"`
	CpuUser              *string  `protobuf:"bytes,10,opt,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuUsageInfo) Reset()         { *m = CpuUsageInfo{} }
func (m *CpuUsageInfo) String() string { return proto.CompactTextString(m) }
func (*CpuUsageInfo) ProtoMessage()    {}
func (*CpuUsageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{2}
}

func (m *CpuUsageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CpuUsageInfo.Unmarshal(m, b)
}
func (m *CpuUsageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CpuUsageInfo.Marshal(b, m, deterministic)
}
func (m *CpuUsageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuUsageInfo.Merge(m, src)
}
func (m *CpuUsageInfo) XXX_Size() int {
	return xxx_messageInfo_CpuUsageInfo.Size(m)
}
func (m *CpuUsageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuUsageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CpuUsageInfo proto.InternalMessageInfo

func (m *CpuUsageInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *CpuUsageInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *CpuUsageInfo) GetCpuUtilization() uint64 {
	if m != nil && m.CpuUtilization != nil {
		return *m.CpuUtilization
	}
	return 0
}

func (m *CpuUsageInfo) GetCpuZone() uint64 {
	if m != nil && m.CpuZone != nil {
		return *m.CpuZone
	}
	return 0
}

func (m *CpuUsageInfo) GetCpuLoad() float32 {
	if m != nil && m.CpuLoad != nil {
		return *m.CpuLoad
	}
	return 0
}

func (m *CpuUsageInfo) GetCpuUser() string {
	if m != nil && m.CpuUser != nil {
		return *m.CpuUser
	}
	return ""
}

//--------------------------
type MemUsageInfo struct {
	SvcsetId               *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent        *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId       *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType                *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType             *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName             *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	MemPercentUsed         *float32 `protobuf:"fixed32,7,opt,name=mem_percent_used,json=memPercentUsed" json:"mem_percent_used,omitempty"`
	MemBytesUsed           *uint64  `protobuf:"varint,8,opt,name=mem_bytes_used,json=memBytesUsed" json:"mem_bytes_used,omitempty"`
	MemZone                *uint64  `protobuf:"varint,9,opt,name=mem_zone,json=memZone" json:"mem_zone,omitempty"`
	PolicyBytesUsed        *uint64  `protobuf:"varint,10,opt,name=policy_bytes_used,json=policyBytesUsed" json:"policy_bytes_used,omitempty"`
	PolicyBytesUsedPercent *uint64  `protobuf:"varint,11,opt,name=policy_bytes_used_percent,json=policyBytesUsedPercent" json:"policy_bytes_used_percent,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MemUsageInfo) Reset()         { *m = MemUsageInfo{} }
func (m *MemUsageInfo) String() string { return proto.CompactTextString(m) }
func (*MemUsageInfo) ProtoMessage()    {}
func (*MemUsageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{3}
}

func (m *MemUsageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemUsageInfo.Unmarshal(m, b)
}
func (m *MemUsageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemUsageInfo.Marshal(b, m, deterministic)
}
func (m *MemUsageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemUsageInfo.Merge(m, src)
}
func (m *MemUsageInfo) XXX_Size() int {
	return xxx_messageInfo_MemUsageInfo.Size(m)
}
func (m *MemUsageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MemUsageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MemUsageInfo proto.InternalMessageInfo

func (m *MemUsageInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *MemUsageInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *MemUsageInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *MemUsageInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *MemUsageInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *MemUsageInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *MemUsageInfo) GetMemPercentUsed() float32 {
	if m != nil && m.MemPercentUsed != nil {
		return *m.MemPercentUsed
	}
	return 0
}

func (m *MemUsageInfo) GetMemBytesUsed() uint64 {
	if m != nil && m.MemBytesUsed != nil {
		return *m.MemBytesUsed
	}
	return 0
}

func (m *MemUsageInfo) GetMemZone() uint64 {
	if m != nil && m.MemZone != nil {
		return *m.MemZone
	}
	return 0
}

func (m *MemUsageInfo) GetPolicyBytesUsed() uint64 {
	if m != nil && m.PolicyBytesUsed != nil {
		return *m.PolicyBytesUsed
	}
	return 0
}

func (m *MemUsageInfo) GetPolicyBytesUsedPercent() uint64 {
	if m != nil && m.PolicyBytesUsedPercent != nil {
		return *m.PolicyBytesUsedPercent
	}
	return 0
}

//--------------------------
type ServicesInfo struct {
	SvcsetId             *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent      *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId     *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType              *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType           *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName           *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	InternalSvcSetId     *uint64  `protobuf:"varint,7,opt,name=internal_svc_set_id,json=internalSvcSetId" json:"internal_svc_set_id,omitempty"`
	ActiveSvcSetCount    *uint64  `protobuf:"varint,8,opt,name=active_svc_set_count,json=activeSvcSetCount" json:"active_svc_set_count,omitempty"`
	TotalSvcSetCount     *uint64  `protobuf:"varint,9,opt,name=total_svc_set_count,json=totalSvcSetCount" json:"total_svc_set_count,omitempty"`
	MemBytesUsed         *uint64  `protobuf:"varint,10,opt,name=mem_bytes_used,json=memBytesUsed" json:"mem_bytes_used,omitempty"`
	MemBytesUsedPercent  *uint64  `protobuf:"varint,11,opt,name=mem_bytes_used_percent,json=memBytesUsedPercent" json:"mem_bytes_used_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesInfo) Reset()         { *m = ServicesInfo{} }
func (m *ServicesInfo) String() string { return proto.CompactTextString(m) }
func (*ServicesInfo) ProtoMessage()    {}
func (*ServicesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{4}
}

func (m *ServicesInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesInfo.Unmarshal(m, b)
}
func (m *ServicesInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesInfo.Marshal(b, m, deterministic)
}
func (m *ServicesInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesInfo.Merge(m, src)
}
func (m *ServicesInfo) XXX_Size() int {
	return xxx_messageInfo_ServicesInfo.Size(m)
}
func (m *ServicesInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesInfo proto.InternalMessageInfo

func (m *ServicesInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *ServicesInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *ServicesInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *ServicesInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *ServicesInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *ServicesInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *ServicesInfo) GetInternalSvcSetId() uint64 {
	if m != nil && m.InternalSvcSetId != nil {
		return *m.InternalSvcSetId
	}
	return 0
}

func (m *ServicesInfo) GetActiveSvcSetCount() uint64 {
	if m != nil && m.ActiveSvcSetCount != nil {
		return *m.ActiveSvcSetCount
	}
	return 0
}

func (m *ServicesInfo) GetTotalSvcSetCount() uint64 {
	if m != nil && m.TotalSvcSetCount != nil {
		return *m.TotalSvcSetCount
	}
	return 0
}

func (m *ServicesInfo) GetMemBytesUsed() uint64 {
	if m != nil && m.MemBytesUsed != nil {
		return *m.MemBytesUsed
	}
	return 0
}

func (m *ServicesInfo) GetMemBytesUsedPercent() uint64 {
	if m != nil && m.MemBytesUsedPercent != nil {
		return *m.MemBytesUsedPercent
	}
	return 0
}

//--------------------------
type PktDropInfo struct {
	SvcsetId               *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent        *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId       *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType                *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType             *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName             *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	MemlimitDrops          *uint64  `protobuf:"varint,7,opt,name=memlimit_drops,json=memlimitDrops" json:"memlimit_drops,omitempty"`
	CpulimitDrops          *uint64  `protobuf:"varint,8,opt,name=cpulimit_drops,json=cpulimitDrops" json:"cpulimit_drops,omitempty"`
	FlowlimitDrops         *uint64  `protobuf:"varint,9,opt,name=flowlimit_drops,json=flowlimitDrops" json:"flowlimit_drops,omitempty"`
	PtclcopyDrops          *uint64  `protobuf:"varint,10,opt,name=ptclcopy_drops,json=ptclcopyDrops" json:"ptclcopy_drops,omitempty"`
	IngressDropFlows       *uint64  `protobuf:"varint,11,opt,name=ingress_drop_flows,json=ingressDropFlows" json:"ingress_drop_flows,omitempty"`
	EgressDropFlows        *uint64  `protobuf:"varint,12,opt,name=egress_drop_flows,json=egressDropFlows" json:"egress_drop_flows,omitempty"`
	DropExceedIngressLimit *uint64  `protobuf:"varint,13,opt,name=drop_exceed_ingress_limit,json=dropExceedIngressLimit" json:"drop_exceed_ingress_limit,omitempty"`
	DropExceedEgressLimit  *uint64  `protobuf:"varint,14,opt,name=drop_exceed_egress_limit,json=dropExceedEgressLimit" json:"drop_exceed_egress_limit,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *PktDropInfo) Reset()         { *m = PktDropInfo{} }
func (m *PktDropInfo) String() string { return proto.CompactTextString(m) }
func (*PktDropInfo) ProtoMessage()    {}
func (*PktDropInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{5}
}

func (m *PktDropInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PktDropInfo.Unmarshal(m, b)
}
func (m *PktDropInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PktDropInfo.Marshal(b, m, deterministic)
}
func (m *PktDropInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PktDropInfo.Merge(m, src)
}
func (m *PktDropInfo) XXX_Size() int {
	return xxx_messageInfo_PktDropInfo.Size(m)
}
func (m *PktDropInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PktDropInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PktDropInfo proto.InternalMessageInfo

func (m *PktDropInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *PktDropInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *PktDropInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *PktDropInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *PktDropInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *PktDropInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *PktDropInfo) GetMemlimitDrops() uint64 {
	if m != nil && m.MemlimitDrops != nil {
		return *m.MemlimitDrops
	}
	return 0
}

func (m *PktDropInfo) GetCpulimitDrops() uint64 {
	if m != nil && m.CpulimitDrops != nil {
		return *m.CpulimitDrops
	}
	return 0
}

func (m *PktDropInfo) GetFlowlimitDrops() uint64 {
	if m != nil && m.FlowlimitDrops != nil {
		return *m.FlowlimitDrops
	}
	return 0
}

func (m *PktDropInfo) GetPtclcopyDrops() uint64 {
	if m != nil && m.PtclcopyDrops != nil {
		return *m.PtclcopyDrops
	}
	return 0
}

func (m *PktDropInfo) GetIngressDropFlows() uint64 {
	if m != nil && m.IngressDropFlows != nil {
		return *m.IngressDropFlows
	}
	return 0
}

func (m *PktDropInfo) GetEgressDropFlows() uint64 {
	if m != nil && m.EgressDropFlows != nil {
		return *m.EgressDropFlows
	}
	return 0
}

func (m *PktDropInfo) GetDropExceedIngressLimit() uint64 {
	if m != nil && m.DropExceedIngressLimit != nil {
		return *m.DropExceedIngressLimit
	}
	return 0
}

func (m *PktDropInfo) GetDropExceedEgressLimit() uint64 {
	if m != nil && m.DropExceedEgressLimit != nil {
		return *m.DropExceedEgressLimit
	}
	return 0
}

var E_JnprScvsInfraExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*ServicesInfra)(nil),
	Field:         78,
	Name:          "jnprScvsInfraExt",
	Tag:           "bytes,78,opt,name=jnprScvsInfraExt",
	Filename:      "svcset_telemetry.proto",
}

func init() {
	proto.RegisterType((*ServicesInfra)(nil), "ServicesInfra")
	proto.RegisterType((*PluginsInfo)(nil), "PluginsInfo")
	proto.RegisterType((*CpuUsageInfo)(nil), "CpuUsageInfo")
	proto.RegisterType((*MemUsageInfo)(nil), "MemUsageInfo")
	proto.RegisterType((*ServicesInfo)(nil), "ServicesInfo")
	proto.RegisterType((*PktDropInfo)(nil), "PktDropInfo")
	proto.RegisterExtension(E_JnprScvsInfraExt)
}

func init() { proto.RegisterFile("svcset_telemetry.proto", fileDescriptor_d1f011be0986ccfc) }

var fileDescriptor_d1f011be0986ccfc = []byte{
	// 990 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xcf, 0x6e, 0xdb, 0x46,
	0x10, 0xc6, 0x61, 0xc9, 0xb1, 0xad, 0xd5, 0x7f, 0x3a, 0x71, 0xe8, 0x14, 0x28, 0x04, 0xa3, 0xad,
	0x85, 0xa0, 0x71, 0x80, 0x14, 0x45, 0x9b, 0xa2, 0x97, 0xc6, 0x71, 0x00, 0x15, 0xb1, 0x21, 0x48,
	0xf1, 0xa5, 0x17, 0x82, 0x59, 0x8e, 0x1c, 0x56, 0x24, 0x77, 0xc0, 0x59, 0x32, 0x56, 0x9e, 0xa9,
	0xf7, 0x3e, 0x46, 0x7b, 0xeb, 0xb1, 0xaf, 0x52, 0xec, 0xce, 0x52, 0x66, 0xa4, 0x3e, 0x81, 0x8f,
	0x9a, 0xef, 0xf7, 0x0d, 0x67, 0xf7, 0xdb, 0x15, 0x29, 0x8e, 0xa8, 0x94, 0x04, 0x3a, 0xd0, 0x90,
	0x40, 0x0a, 0x3a, 0x5f, 0x9d, 0x61, 0xae, 0xb4, 0x7a, 0x72, 0xb8, 0x2e, 0x04, 0x5a, 0x21, 0x17,
	0x4f, 0xfe, 0x68, 0x88, 0xee, 0x1c, 0xf2, 0x32, 0x96, 0x40, 0x93, 0x6c, 0x91, 0x87, 0xde, 0x8f,
	0x62, 0x68, 0x1a, 0x04, 0x98, 0x14, 0x37, 0x71, 0x46, 0x41, 0x9c, 0x2d, 0x94, 0xbf, 0x33, 0x6a,
	0x8e, 0xdb, 0x2f, 0x3a, 0x67, 0x53, 0x2e, 0x4e, 0xb2, 0x85, 0x9a, 0xf5, 0x0d, 0x56, 0x2b, 0x78,
	0xdf, 0x8b, 0xbe, 0x7b, 0xb4, 0xc4, 0x82, 0x7d, 0x0d, 0xeb, 0xeb, 0x9e, 0x9d, 0x63, 0x71, 0x4d,
	0xe1, 0x0d, 0x58, 0x63, 0x97, 0xa9, 0x73, 0x2c, 0x36, 0x6c, 0x29, 0xa4, 0x6c, 0x6b, 0x3a, 0xdb,
	0x25, 0xa4, 0x5b, 0xb6, 0x4b, 0x48, 0x37, 0x6c, 0x54, 0x4a, 0xb6, 0xed, 0x3a, 0x5b, 0x6d, 0x41,
	0x6b, 0xdb, 0xbc, 0x94, 0xd6, 0xf6, 0xb3, 0x38, 0x74, 0x36, 0x5c, 0xea, 0x28, 0x57, 0xc8, 0xd6,
	0x07, 0xd5, 0x02, 0x97, 0xfa, 0x75, 0xae, 0xd0, 0x3a, 0x87, 0x0c, 0x4e, 0x99, 0x33, 0xa5, 0x93,
	0x7f, 0x9a, 0xa2, 0x5d, 0x5f, 0xf2, 0x57, 0xa2, 0x47, 0x18, 0x64, 0x45, 0x5a, 0x6d, 0x97, 0xbf,
	0x33, 0xda, 0x19, 0xef, 0xce, 0x3a, 0x84, 0x57, 0x45, 0xea, 0x48, 0xef, 0xb1, 0xd8, 0x37, 0x54,
	0x98, 0x82, 0xdf, 0x18, 0xed, 0x8c, 0x5b, 0xb3, 0x3d, 0xc2, 0xab, 0x30, 0x05, 0xef, 0x91, 0xd8,
	0x23, 0x0c, 0x30, 0x8e, 0xfc, 0xa6, 0xb5, 0x3d, 0x20, 0x9c, 0xc6, 0x91, 0xf7, 0xa5, 0x68, 0x13,
	0x06, 0x51, 0xa8, 0xc3, 0x00, 0xca, 0x0f, 0xfe, 0xae, 0xd5, 0x5a, 0x84, 0xaf, 0x43, 0x1d, 0x5e,
	0x94, 0x1f, 0xdc, 0x53, 0xa5, 0xca, 0x74, 0xae, 0x12, 0x8b, 0x3c, 0xa8, 0x9e, 0x7a, 0xce, 0x45,
	0x43, 0x1d, 0x8b, 0x03, 0x43, 0x25, 0x21, 0x91, 0xbf, 0x67, 0xf5, 0x7d, 0xc2, 0x73, 0xf3, 0xd3,
	0x35, 0xc0, 0x5c, 0x95, 0x71, 0x04, 0x79, 0x10, 0x47, 0xfe, 0x7e, 0xd5, 0x60, 0xea, 0x8a, 0x93,
	0xc8, 0x7b, 0x22, 0x5a, 0x84, 0x41, 0x88, 0x68, 0x80, 0x83, 0xaa, 0xc3, 0x2f, 0x88, 0x93, 0xc8,
	0xfb, 0x46, 0xf4, 0x4d, 0x07, 0xbb, 0xc0, 0x60, 0x91, 0x84, 0x37, 0xe4, 0xb7, 0x2c, 0xd1, 0x25,
	0xe4, 0x65, 0xbf, 0x31, 0x45, 0xef, 0xb9, 0x78, 0x48, 0x18, 0x68, 0x89, 0x01, 0x15, 0x88, 0x2a,
	0xd7, 0x0e, 0x16, 0x16, 0x1e, 0x12, 0xbe, 0x93, 0x38, 0x67, 0x85, 0x0d, 0xa7, 0x62, 0x40, 0x18,
	0x40, 0xc9, 0x83, 0x07, 0xef, 0x43, 0x02, 0xbf, 0x5d, 0x75, 0xbe, 0x28, 0xed, 0xfc, 0xaf, 0x42,
	0x82, 0x6a, 0x0d, 0x3c, 0x41, 0x1a, 0xd2, 0xd2, 0xef, 0xac, 0xd7, 0x60, 0x8b, 0x97, 0x21, 0x2d,
	0x37, 0xdb, 0xd9, 0x0c, 0xba, 0xa3, 0xe6, 0xb8, 0x55, 0x6b, 0x67, 0xa2, 0x38, 0xf9, 0xb7, 0x21,
	0x3a, 0xf5, 0x53, 0xea, 0x7d, 0x21, 0x5a, 0xee, 0xa0, 0xc4, 0x91, 0x4b, 0xf5, 0x80, 0x0b, 0x93,
	0xc8, 0x7b, 0x2a, 0x86, 0x6b, 0x31, 0xc0, 0x1c, 0x08, 0x32, 0x6d, 0xb3, 0xdd, 0x9d, 0xf5, 0x2b,
	0x68, 0xca, 0x65, 0xef, 0x99, 0x38, 0x84, 0x5b, 0x0d, 0x79, 0x16, 0x26, 0xf6, 0xa8, 0xba, 0x96,
	0x9c, 0xf8, 0xa0, 0x92, 0xe6, 0xa5, 0x9c, 0xdb, 0xd6, 0x26, 0xb6, 0x52, 0x06, 0x7a, 0x85, 0xe0,
	0x92, 0xdf, 0xa7, 0x52, 0xbe, 0x5b, 0x21, 0x78, 0x23, 0xd1, 0xa9, 0x1a, 0x58, 0x99, 0x53, 0x17,
	0x64, 0xad, 0x9b, 0x84, 0x5d, 0xea, 0x9e, 0x3d, 0x6e, 0x8e, 0xb0, 0x47, 0xee, 0x54, 0xf4, 0xcd,
	0xed, 0x2c, 0x74, 0x9c, 0xc4, 0x9f, 0x42, 0x1d, 0xab, 0xcc, 0x65, 0xdf, 0x93, 0x58, 0x5c, 0xdf,
	0x55, 0xcd, 0x1c, 0x06, 0xfc, 0xa4, 0x32, 0xa8, 0xc2, 0x97, 0x58, 0xfc, 0xa6, 0x32, 0xa8, 0xa4,
	0x44, 0x85, 0x91, 0x4d, 0xbd, 0x61, 0xa5, 0xb7, 0x2a, 0x8c, 0x2a, 0xa9, 0x20, 0xc8, 0x6d, 0xc6,
	0x2d, 0x2b, 0x5d, 0x13, 0xe4, 0x27, 0x7f, 0x36, 0x45, 0xa7, 0x7e, 0xa1, 0xef, 0xeb, 0x0e, 0x8f,
	0xc5, 0xc0, 0xfc, 0x91, 0x21, 0xe4, 0x12, 0x32, 0x6d, 0xb6, 0x82, 0xaf, 0x57, 0x63, 0xd6, 0x4b,
	0x21, 0x9d, 0x72, 0xf9, 0x9a, 0x20, 0x32, 0x47, 0xd8, 0x90, 0xef, 0x57, 0x1a, 0x88, 0x39, 0xde,
	0xe8, 0x4e, 0x0a, 0xe9, 0x2b, 0x53, 0xb4, 0xd4, 0xb1, 0x38, 0x30, 0x94, 0x0d, 0x82, 0xef, 0xd8,
	0x7e, 0x0a, 0xa9, 0x0d, 0xe2, 0xa9, 0x18, 0xa2, 0x4a, 0x62, 0xb9, 0xaa, 0xf7, 0xe0, 0xab, 0xd5,
	0x67, 0xe1, 0xae, 0xcd, 0x4b, 0x71, 0xbc, 0xc5, 0x56, 0x43, 0xba, 0x1b, 0x76, 0xb4, 0xe1, 0x71,
	0xb3, 0x9e, 0xfc, 0xd5, 0x14, 0x9d, 0xfa, 0x7f, 0xea, 0x7d, 0x4d, 0xee, 0x99, 0x38, 0x8c, 0xb3,
	0xed, 0x69, 0xf8, 0x7e, 0x0c, 0x2a, 0x69, 0x3d, 0xcd, 0x73, 0xf1, 0x30, 0x94, 0x3a, 0x2e, 0x61,
	0x0d, 0x4b, 0x55, 0x64, 0xda, 0x85, 0x38, 0x64, 0x8d, 0xe9, 0x73, 0x23, 0x98, 0xfe, 0x5a, 0xe9,
	0x5a, 0x73, 0xe6, 0x39, 0xd4, 0x81, 0x95, 0xea, 0xf8, 0xf6, 0xf1, 0x10, 0xff, 0x73, 0x3c, 0xbe,
	0x13, 0x47, 0x9f, 0x53, 0x1b, 0xa1, 0x1e, 0xd6, 0xe9, 0x2a, 0xd1, 0xbf, 0x77, 0x45, 0xbb, 0xf6,
	0xaa, 0xbb, 0xaf, 0x81, 0x7e, 0x6d, 0x77, 0x30, 0x89, 0xd3, 0x58, 0x07, 0xe6, 0x1d, 0x4e, 0x2e,
	0xcb, 0x6e, 0x55, 0x35, 0x1b, 0x40, 0x06, 0x93, 0x58, 0xd4, 0x31, 0x8e, 0xb0, 0x5b, 0x55, 0x19,
	0x3b, 0x15, 0xfd, 0x45, 0xa2, 0x3e, 0xd6, 0x39, 0x8e, 0xae, 0xb7, 0x2e, 0xaf, 0xfb, 0xa1, 0x96,
	0x89, 0x54, 0xb8, 0x72, 0x1c, 0x07, 0xd7, 0xad, 0xaa, 0x8c, 0x7d, 0x2b, 0xbc, 0x38, 0xbb, 0xc9,
	0x81, 0xc8, 0x52, 0x81, 0xe9, 0x42, 0x2e, 0xb5, 0x81, 0x53, 0x0c, 0xf9, 0xc6, 0xd4, 0x4d, 0x0a,
	0xb0, 0x05, 0xf3, 0x2b, 0xaf, 0x0f, 0x1b, 0xec, 0x4b, 0x71, 0x6c, 0x21, 0xb8, 0x95, 0x00, 0x51,
	0x50, 0x3d, 0xc5, 0x8e, 0xe8, 0x77, 0xf9, 0xae, 0x1b, 0xe0, 0xc2, 0xea, 0x13, 0x96, 0xdf, 0x1a,
	0xd5, 0xfb, 0x41, 0xf8, 0x75, 0x2b, 0xd4, 0x9d, 0x3d, 0xeb, 0x7c, 0x74, 0xe7, 0xbc, 0xb8, 0x33,
	0xfe, 0x34, 0x17, 0x83, 0xdf, 0x33, 0xcc, 0xe7, 0xb2, 0xe4, 0x0f, 0xc9, 0x8b, 0x5b, 0xed, 0x3d,
	0x3e, 0xfb, 0xb5, 0xc8, 0x62, 0x84, 0xfc, 0x0a, 0xf4, 0x47, 0x95, 0x2f, 0x69, 0x0e, 0x19, 0xa9,
	0x9c, 0xfc, 0xab, 0xd1, 0xce, 0xb8, 0xfd, 0xa2, 0x77, 0xf6, 0xd9, 0xa7, 0xe7, 0x6c, 0xab, 0xc1,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xc6, 0x2f, 0x84, 0xcc, 0x0a, 0x00, 0x00,
}
