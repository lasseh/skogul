// Code generated by protoc-gen-go. DO NOT EDIT.
// source: npu_memory_utilization.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Top level message NetworkProcessorMemoryUtilization
type NetworkProcessorMemoryUtilization struct {
	MemoryStats          []*NpuMemory `protobuf:"bytes,1,rep,name=memory_stats,json=memoryStats" json:"memory_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NetworkProcessorMemoryUtilization) Reset()         { *m = NetworkProcessorMemoryUtilization{} }
func (m *NetworkProcessorMemoryUtilization) String() string { return proto.CompactTextString(m) }
func (*NetworkProcessorMemoryUtilization) ProtoMessage()    {}
func (*NetworkProcessorMemoryUtilization) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2c00ab8118d5b6, []int{0}
}

func (m *NetworkProcessorMemoryUtilization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkProcessorMemoryUtilization.Unmarshal(m, b)
}
func (m *NetworkProcessorMemoryUtilization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkProcessorMemoryUtilization.Marshal(b, m, deterministic)
}
func (m *NetworkProcessorMemoryUtilization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProcessorMemoryUtilization.Merge(m, src)
}
func (m *NetworkProcessorMemoryUtilization) XXX_Size() int {
	return xxx_messageInfo_NetworkProcessorMemoryUtilization.Size(m)
}
func (m *NetworkProcessorMemoryUtilization) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProcessorMemoryUtilization.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProcessorMemoryUtilization proto.InternalMessageInfo

func (m *NetworkProcessorMemoryUtilization) GetMemoryStats() []*NpuMemory {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

// Message that describes the memory utilization for each Network Processor
type NpuMemory struct {
	// Globally unique identifier for an NPU. This is of the form
	// "FPCX:NPUY", where X is the slot number of the line card and Y
	// is the index of the NPU on the linecard
	Identifier *string `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	// NPU memory utilization statistics for different NPU memory types
	Summary []*NpuMemorySummary `protobuf:"bytes,2,rep,name=summary" json:"summary,omitempty"`
	// NPU memory utilization statistics for different NPU memory partitions
	Partition            []*NpuMemoryPartition `protobuf:"bytes,3,rep,name=partition" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NpuMemory) Reset()         { *m = NpuMemory{} }
func (m *NpuMemory) String() string { return proto.CompactTextString(m) }
func (*NpuMemory) ProtoMessage()    {}
func (*NpuMemory) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2c00ab8118d5b6, []int{1}
}

func (m *NpuMemory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NpuMemory.Unmarshal(m, b)
}
func (m *NpuMemory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NpuMemory.Marshal(b, m, deterministic)
}
func (m *NpuMemory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpuMemory.Merge(m, src)
}
func (m *NpuMemory) XXX_Size() int {
	return xxx_messageInfo_NpuMemory.Size(m)
}
func (m *NpuMemory) XXX_DiscardUnknown() {
	xxx_messageInfo_NpuMemory.DiscardUnknown(m)
}

var xxx_messageInfo_NpuMemory proto.InternalMessageInfo

func (m *NpuMemory) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *NpuMemory) GetSummary() []*NpuMemorySummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *NpuMemory) GetPartition() []*NpuMemoryPartition {
	if m != nil {
		return m.Partition
	}
	return nil
}

// Summary of NPU memory utilization for each type of memory
type NpuMemorySummary struct {
	// Name of the partition.
	ResourceName *string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	// Maximum memory size in bytes
	Size *uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// How much memory is used up
	Allocated *uint64 `protobuf:"varint,3,opt,name=allocated" json:"allocated,omitempty"`
	// Utilization in percent
	Utilization          *int32   `protobuf:"varint,4,opt,name=utilization" json:"utilization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NpuMemorySummary) Reset()         { *m = NpuMemorySummary{} }
func (m *NpuMemorySummary) String() string { return proto.CompactTextString(m) }
func (*NpuMemorySummary) ProtoMessage()    {}
func (*NpuMemorySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2c00ab8118d5b6, []int{2}
}

func (m *NpuMemorySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NpuMemorySummary.Unmarshal(m, b)
}
func (m *NpuMemorySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NpuMemorySummary.Marshal(b, m, deterministic)
}
func (m *NpuMemorySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpuMemorySummary.Merge(m, src)
}
func (m *NpuMemorySummary) XXX_Size() int {
	return xxx_messageInfo_NpuMemorySummary.Size(m)
}
func (m *NpuMemorySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_NpuMemorySummary.DiscardUnknown(m)
}

var xxx_messageInfo_NpuMemorySummary proto.InternalMessageInfo

func (m *NpuMemorySummary) GetResourceName() string {
	if m != nil && m.ResourceName != nil {
		return *m.ResourceName
	}
	return ""
}

func (m *NpuMemorySummary) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *NpuMemorySummary) GetAllocated() uint64 {
	if m != nil && m.Allocated != nil {
		return *m.Allocated
	}
	return 0
}

func (m *NpuMemorySummary) GetUtilization() int32 {
	if m != nil && m.Utilization != nil {
		return *m.Utilization
	}
	return 0
}

// A set of detailed stats for NPU memory partition
type NpuMemoryPartition struct {
	// NPU memory Partition name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the Application for which npu memory is allocated
	ApplicationName *string `protobuf:"bytes,2,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	// Number of bytes allocated for the application
	BytesAllocated *uint32 `protobuf:"varint,3,opt,name=bytes_allocated,json=bytesAllocated" json:"bytes_allocated,omitempty"`
	// number of allocations for the application
	AllocationCount *uint32 `protobuf:"varint,4,opt,name=allocation_count,json=allocationCount" json:"allocation_count,omitempty"`
	// number of frees for the application
	FreeCount            *uint32  `protobuf:"varint,5,opt,name=free_count,json=freeCount" json:"free_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NpuMemoryPartition) Reset()         { *m = NpuMemoryPartition{} }
func (m *NpuMemoryPartition) String() string { return proto.CompactTextString(m) }
func (*NpuMemoryPartition) ProtoMessage()    {}
func (*NpuMemoryPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2c00ab8118d5b6, []int{3}
}

func (m *NpuMemoryPartition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NpuMemoryPartition.Unmarshal(m, b)
}
func (m *NpuMemoryPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NpuMemoryPartition.Marshal(b, m, deterministic)
}
func (m *NpuMemoryPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpuMemoryPartition.Merge(m, src)
}
func (m *NpuMemoryPartition) XXX_Size() int {
	return xxx_messageInfo_NpuMemoryPartition.Size(m)
}
func (m *NpuMemoryPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_NpuMemoryPartition.DiscardUnknown(m)
}

var xxx_messageInfo_NpuMemoryPartition proto.InternalMessageInfo

func (m *NpuMemoryPartition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NpuMemoryPartition) GetApplicationName() string {
	if m != nil && m.ApplicationName != nil {
		return *m.ApplicationName
	}
	return ""
}

func (m *NpuMemoryPartition) GetBytesAllocated() uint32 {
	if m != nil && m.BytesAllocated != nil {
		return *m.BytesAllocated
	}
	return 0
}

func (m *NpuMemoryPartition) GetAllocationCount() uint32 {
	if m != nil && m.AllocationCount != nil {
		return *m.AllocationCount
	}
	return 0
}

func (m *NpuMemoryPartition) GetFreeCount() uint32 {
	if m != nil && m.FreeCount != nil {
		return *m.FreeCount
	}
	return 0
}

var E_NpuMemoryExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkProcessorMemoryUtilization)(nil),
	Field:         11,
	Name:          "npu_memory_ext",
	Tag:           "bytes,11,opt,name=npu_memory_ext",
	Filename:      "npu_memory_utilization.proto",
}

func init() {
	proto.RegisterType((*NetworkProcessorMemoryUtilization)(nil), "NetworkProcessorMemoryUtilization")
	proto.RegisterType((*NpuMemory)(nil), "NpuMemory")
	proto.RegisterType((*NpuMemorySummary)(nil), "NpuMemorySummary")
	proto.RegisterType((*NpuMemoryPartition)(nil), "NpuMemoryPartition")
	proto.RegisterExtension(E_NpuMemoryExt)
}

func init() { proto.RegisterFile("npu_memory_utilization.proto", fileDescriptor_1c2c00ab8118d5b6) }

var fileDescriptor_1c2c00ab8118d5b6 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8f, 0xd3, 0x30,
	0x10, 0x85, 0xe5, 0xb6, 0x2b, 0x94, 0x49, 0xbb, 0x5d, 0xbc, 0x07, 0x2c, 0xb4, 0xa0, 0x50, 0x0e,
	0x04, 0x21, 0x2a, 0xb1, 0x47, 0x6e, 0x08, 0x71, 0x41, 0xa2, 0x5a, 0xb9, 0xe2, 0x1c, 0x99, 0xec,
	0xac, 0x64, 0x91, 0xd8, 0x96, 0x3d, 0x11, 0xdb, 0xfd, 0x0b, 0xfc, 0x2f, 0x7e, 0x17, 0xb2, 0xd3,
	0x34, 0x01, 0x0e, 0xdc, 0x9c, 0xef, 0xbd, 0x79, 0x79, 0x1a, 0x0d, 0x5c, 0x19, 0xd7, 0x55, 0x2d,
	0xb6, 0xd6, 0x1f, 0xaa, 0x8e, 0x74, 0xa3, 0x1f, 0x14, 0x69, 0x6b, 0xb6, 0xce, 0x5b, 0xb2, 0x4f,
	0x2f, 0x09, 0x1b, 0x6c, 0x91, 0xfc, 0xa1, 0x22, 0xeb, 0x7a, 0xb8, 0x91, 0xf0, 0x62, 0x87, 0xf4,
	0xc3, 0xfa, 0xef, 0x37, 0xde, 0xd6, 0x18, 0x82, 0xf5, 0x5f, 0x52, 0xc0, 0xd7, 0x71, 0x9e, 0xbf,
	0x85, 0xe5, 0x31, 0x35, 0x90, 0xa2, 0x20, 0x58, 0x31, 0x2f, 0xf3, 0x6b, 0xd8, 0xee, 0x5c, 0xd7,
	0x9b, 0x65, 0xde, 0xeb, 0xfb, 0x28, 0x6f, 0x7e, 0x32, 0xc8, 0x4e, 0x12, 0x7f, 0x0e, 0xa0, 0x6f,
	0xd1, 0x90, 0xbe, 0xd3, 0xe8, 0x05, 0x2b, 0x66, 0x65, 0x26, 0x27, 0x84, 0xbf, 0x81, 0x47, 0xa1,
	0x6b, 0x5b, 0xe5, 0x0f, 0x62, 0x96, 0x72, 0x1f, 0x8f, 0xb9, 0xfb, 0x5e, 0x90, 0x83, 0x83, 0xbf,
	0x83, 0xcc, 0x29, 0x4f, 0x3a, 0xd6, 0x12, 0xf3, 0x64, 0xbf, 0x1c, 0xed, 0x37, 0x83, 0x24, 0x47,
	0x57, 0x6c, 0x73, 0xf1, 0x77, 0x20, 0x7f, 0x09, 0x2b, 0x8f, 0xc1, 0x76, 0xbe, 0xc6, 0xca, 0xa8,
	0x16, 0x05, 0x2b, 0x58, 0x99, 0xc9, 0xe5, 0x00, 0x77, 0xaa, 0x45, 0xce, 0x61, 0x11, 0xf4, 0x03,
	0x8a, 0x59, 0xc1, 0xca, 0x85, 0x4c, 0x6f, 0x7e, 0x05, 0x99, 0x6a, 0x1a, 0x5b, 0x2b, 0xc2, 0x5b,
	0x31, 0x4f, 0xc2, 0x08, 0x78, 0x01, 0xf9, 0x64, 0xef, 0x62, 0x51, 0xb0, 0xf2, 0x4c, 0x4e, 0xd1,
	0xe6, 0x17, 0x03, 0xfe, 0x6f, 0xdf, 0xf8, 0xab, 0x49, 0x8d, 0xf4, 0xe6, 0xaf, 0xe1, 0x42, 0x39,
	0xd7, 0xe8, 0x3a, 0x4d, 0xf6, 0x35, 0x67, 0x49, 0x5f, 0x4f, 0x78, 0x6a, 0xfa, 0x0a, 0xd6, 0xdf,
	0x0e, 0x84, 0xa1, 0xfa, 0xb3, 0xdb, 0x4a, 0x9e, 0x27, 0xfc, 0xe1, 0x54, 0x30, 0x66, 0xf6, 0x1f,
	0x31, 0xb2, 0xb6, 0x9d, 0xa1, 0xd4, 0x72, 0x25, 0xd7, 0x23, 0xff, 0x18, 0x31, 0x7f, 0x06, 0x70,
	0xe7, 0x11, 0x8f, 0xa6, 0xb3, 0x64, 0xca, 0x22, 0x49, 0xf2, 0x7b, 0x05, 0xe7, 0x93, 0x6b, 0xc3,
	0x7b, 0xe2, 0x4f, 0xb6, 0x9f, 0x3b, 0xa3, 0x1d, 0xfa, 0xe3, 0x41, 0x85, 0x3d, 0x9a, 0x60, 0x7d,
	0x10, 0x79, 0xc1, 0xca, 0xfc, 0x7a, 0xb3, 0xfd, 0xef, 0xa1, 0xc9, 0xa5, 0x19, 0x56, 0xf3, 0xe9,
	0x9e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xff, 0x4d, 0xa6, 0xcf, 0x02, 0x00, 0x00,
}
